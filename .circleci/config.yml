version: 2.1
orbs:
  slack: circleci/slack@4.1

defaults: &defaults
      docker:
      - image: circleci/node:13.8.0    
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy backend stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - run:
          name: Destroy frontend stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
          when: on_fail
           
jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [mfrontendbuild]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            # Your code here
            npm update
            npm run build
      - save_cache:
          paths: [frontend/mynode_modules]
          key: mfrontendbuild

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [mbackendbuild]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
              # Your code here
              npm update
              npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1     
      - save_cache:
          paths: [backend/mnode_modules]
          key: mbackendbuild

  test-frontend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontendtest]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm install @babel/core @babel/preset-typescript @babel/preset-env
            npm run test  
      - save_cache:
          paths: [frontend/node_modules]
          key: frontendtest
                
  test-backend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backendtest]
      - run:
          
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backendtest



  scan-frontend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontscan]
      - run: 
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [front/node_modules]
          key: frontscan

  scan-backend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout

      - restore_cache:
          keys: [mbackendscan]
      - run: 
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit 
      - slack/notify:
          event: fail
              custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "plain_text",
                            "text": "*This is a text notification*",
                            "emoji": true
                          }
                        ]
                      }
                    ]
                  }

      - save_cache:
          paths: [backend/node_modules]
          key: mbackendscan
      

  
  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["db:88:54:02:a5:95:7c:f0:c4:71:43:09:ef:36:ec:b6"]
        - attach_workspace:
            at: /tmp/.circleci/ansible
        - run:
            name: Install dependencies
            command: |
              apk add --no-cache \
                  python3 \
                  py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
                  awscli \
              && rm -rf /var/cache/apk/*
              apk add --update ansible
              
        - run:
            name: Configure server
            command: |
              ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
        - destroy-environment # Rollback on failure

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID}
      - run:
      
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
           aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --output text >> inventory
            cat inventory

      - run:
          name: Dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip jq npm   

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory

      - destroy-environment
        
      # Here's where you will add some code to rollback on failure    


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-frontend:
          requires: [build-frontend]

      
 

      

