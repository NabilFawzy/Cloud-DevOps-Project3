version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy backend stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - run:
          name: Destroy frontend stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
          when: on_fail
defaults: &defaults
      docker:
      - image: circleci/node:13.8.0               
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [mfrontendbuild]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            # Your code here
            npm update
            npm run build
      - save_cache:
          paths: [frontend/mynode_modules]
          key: mfrontendbuild

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [mbackendbuild]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
              # Your code here
              npm update
              npm run build
      - save_cache:
          paths: [backend/mnode_modules]
          key: mbackendbuild

  test-frontend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontendtest]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm install @babel/core @babel/preset-typescript @babel/preset-env
            npm run test
                
      - save_cache:
          paths: [frontend/node_modules]
          key: frontendtest
                
  test-backend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backendtest]
      - run:
          
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backendtest


  scan-frontend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [front-scan]
      - run: 
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [front/node_modules]
          key: front-scan

  scan-backend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backendscan]
      - run: 
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backendscan
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID}\
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID}\
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "" > inventory
            aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text >> inventory
          
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
        when: on_fail
      # Here's where you will add some code to rollback on failure    


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]