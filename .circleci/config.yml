version: 2.1
orbs:
  slack: circleci/slack@4.1

defaults: &defaults
      docker:
      - image: circleci/node:13.8.0    
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Destroy backend stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowId >>
          when: on_fail
      - run:
          name: Destroy frontend stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowId >>
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token:  ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo $SUCCESS
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              pwd
              ls -la
              npm migrations:revert
              exit 1
            fi
      
           
jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            # Your code here
            npm uninstall
            npm cache clean --force
            npm install
            npm run build
      - save_cache:
          paths: [frontend/mynode_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
              # Your code here
              npm uninstall
              npm cache clean --force
              npm install
              npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1     
      - save_cache:
          paths: [backend/mnode_modules]
          key: backend-build

  test-frontend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm uninstall
            npm cache clean --force
            npm install
            npm install @babel/core @babel/preset-typescript @babel/preset-env
            npm run test  
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          
          name: Back-end test
          command: |
            cd backend
            npm uninstall
            npm cache clean --force
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test



  scan-frontend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [amfront-scanm]
      - run: 
          name: front-end scan
          command: |
            cd frontend
            npm uninstall
            npm cache clean --force
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: C01SXTR5L4V
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [front/node_modules]
          key: amfront-scanm

  scan-backend:
    <<: *defaults
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout

      - restore_cache:
          keys: [ambackend-scanm]
      - run: 
          name: Back-end scan
          command: |
            cd backend
            npm uninstall
            npm cache clean --force
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: C01SXTR5L4V
          event: fail
          template: basic_fail_1

      - save_cache:
          paths: [backend/node_modules]
          key: ambackend-scanm
        
  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["db:88:54:02:a5:95:7c:f0:c4:71:43:09:ef:36:ec:b6"]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add tar
              apk add gzip curl
              apk add --update ansible
              pip install awscli
        - run:
            name: Configure server
            command: |
              touch ~/project/backend/.env
              echo ENVIRONMENT=production >> "backend/.env"
              echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION>> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
              echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"

              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"

              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              cat backend/.env
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
        - destroy-environment:
             workflowId: "${CIRCLE_WORKFLOW_ID}"



  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
     
      - run:
          name: Installing dependencies
          command: |
            yum install -y tar gzip curl
          
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity Name=Backend \
              --stack-name backend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            echo $BACKEND_IP
            
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT \
              --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity Name=Frontend \
              --stack-name frontend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID}"


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get -y update
            sudo apt-get -y install python3 \
              python3-pip \
              python3-setuptools \
              curl
            pip3 install --upgrade pip
            pip3 --no-cache-dir install --upgrade awscli

            

      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run build
            sudo npm i -g pm2
            npm run migrations > migrations_dump.txt
            cat  migrations_dump.txt

            
            
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            cat  migrations_dump.txt
            if grep -q "has been executed successfully" migrations_dump.txt
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID}"
                 
      - revert-migrations



  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["db:88:54:02:a5:95:7c:f0:c4:71:43:09:ef:36:ec:b6"]
      - run:
          name: Install dependencies
          working_directory: ./frontend
          command: |
            # your code here
            yum install gzip tar python3-pip curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs npm -y
            npm install        
      - run:
          name: Get backend url
          command: |
            # your code here
            touch ~/project/frontend/.env
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/BACKEND_IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}">> "frontend/.env"
            cat frontend/.env 

            cd frontend
            npm install
            npm update
            npm run build
            cat .env 
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            ls -alh
            aws s3 cp dist/ s3://udapeople-"${CIRCLE_WORKFLOW_ID}"  --recursive
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations   

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["db:88:54:02:a5:95:7c:f0:c4:71:43:09:ef:36:ec:b6"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations

  smoke-test:
    docker:
    - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      
      - run:
          name: Install dependencies
          command: |
             apk add --no-cache curl
             apk add --update curl nodejs npm
             pip3 install awscli
      - run:
          name: Get backend url
          command: |
            PublicDNS= $(cat inventory.txt)
            echo ${PublicDNS}
      - run:
          name: Backend smoke test.
          command: |
            PublicDNS= $(cat inventory.txt)
            if curl -s ${PublicDNS}
            then
              return 0
            else
              return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            PublicDNS= $(cat inventory.txt)
            if curl -s ${PublicDNS}
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
        when: on_fail
       


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend

      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
 
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      
      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]